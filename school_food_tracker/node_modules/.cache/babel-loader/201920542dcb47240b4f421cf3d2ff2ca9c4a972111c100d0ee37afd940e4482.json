{"ast":null,"code":"// api.js\nconst baseUrl = 'https://localhost:7045/SchoolFood';\nexport const getAllClasses = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/get-all-classes`);\n    if (!response.ok) {\n      throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching classes:', error.message);\n    throw error;\n  }\n};\nexport const getStudentData = async requestBody => {\n  try {\n    const response = await fetch(`${baseUrl}/get-student-data`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\n    }\n    const excelBlob = await response.blob();\n    return excelBlob;\n  } catch (error) {\n    console.error('Error fetching student data:', error.message);\n    throw error;\n  }\n};\nexport const findStudent = async codeValue => {\n  try {\n    const response = await fetch(`${baseUrl}/find/${codeValue}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\n    }\n    const result = await response.text();\n    return result;\n  } catch (error) {\n    console.error('Error finding data:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["baseUrl","getAllClasses","response","fetch","ok","Error","url","status","statusText","data","json","error","console","message","getStudentData","requestBody","method","headers","body","JSON","stringify","excelBlob","blob","findStudent","codeValue","result","text"],"sources":["C:/Users/grigo/OneDrive/Рабочий стол/school_food_tracker/src/api.js"],"sourcesContent":["// api.js\r\nconst baseUrl = 'https://localhost:7045/SchoolFood';\r\n\r\nexport const getAllClasses = async () => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/get-all-classes`);\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching classes:', error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getStudentData = async (requestBody) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/get-student-data`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(requestBody),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const excelBlob = await response.blob();\r\n        return excelBlob;\r\n    } catch (error) {\r\n        console.error('Error fetching student data:', error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const findStudent = async (codeValue) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/find/${codeValue}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Request failed: ${response.url} - ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const result = await response.text();\r\n        return result;\r\n    } catch (error) {\r\n        console.error('Error finding data:', error.message);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,mCAAmC;AAEnD,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,kBAAiB,CAAC;IAE1D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,mBAAkBH,QAAQ,CAACI,GAAI,MAAKJ,QAAQ,CAACK,MAAO,IAAGL,QAAQ,CAACM,UAAW,EAAC,CAAC;IAClG;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACvD,MAAMF,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAOC,WAAW,IAAK;EACjD,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,mBAAkB,EAAE;MACxDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IACpC,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,mBAAkBH,QAAQ,CAACI,GAAI,MAAKJ,QAAQ,CAACK,MAAO,IAAGL,QAAQ,CAACM,UAAW,EAAC,CAAC;IAClG;IAEA,MAAMa,SAAS,GAAG,MAAMnB,QAAQ,CAACoB,IAAI,CAAC,CAAC;IACvC,OAAOD,SAAS;EACpB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5D,MAAMF,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMY,WAAW,GAAG,MAAOC,SAAS,IAAK;EAC5C,IAAI;IACA,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,SAAQwB,SAAU,EAAC,EAAE;MACzDR,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,mBAAkBH,QAAQ,CAACI,GAAI,MAAKJ,QAAQ,CAACK,MAAO,IAAGL,QAAQ,CAACM,UAAW,EAAC,CAAC;IAClG;IAEA,MAAMiB,MAAM,GAAG,MAAMvB,QAAQ,CAACwB,IAAI,CAAC,CAAC;IACpC,OAAOD,MAAM;EACjB,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACnD,MAAMF,KAAK;EACf;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}